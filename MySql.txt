Usando XAMPP!

1 - mysql --user=root --password=
(login xampp)

2 - creatE database "NOME DO BANCO";
CRIAR BANCO

3 - create table "NOME DA TABELA" (chave dos valores, chave, chave...);
CRIAR TABELA DENTRO DE BANCO

4 - insert into "NOME DA TABELA" values (valores, valores, valores...);
INSERIR VALORES NA TABELA

5 - describe "NOME DA TABELA";
MOSTRAR VALORES E CHAVES DA TABELA

6 - select * from "NOME DA TABELA";
MOSTRAR VALORES REAIS DA TABELA

7 - DROP TABLE `NOME DA TABELA`;
APAGAR TABELA

8 - DROP DATABASE `NOME DO BANCO`;
APAGAR BANCO

9 - alter table "nome da tabela" add "nome da coluna" (varchar (15));
ADICIONAR NOVA COLUNA NA TABELA

10 - alter table "Nome da tabela" drop "nome da coluna";
APAGAR COLUNA NA TABELA

11 - update "nome da tabela" set id = 6 where `name` like 'Eduardo Marques';
Caso um update seja realizado sem where TODAS AS LINHAS DA TABELA ATUALIZADA
APRESENTARÃO O MESMO VALOR nas colunas modificadas!

12 - delete from "nome da tabela" where `name` like 'Eduardo Marques';
DELETAR LINHA NA TABELA

13 - truncate table "nome da tabela";
APAGAR TODOS OS REGISTROS DA TABELA

14 - mysqldump -u root -p hospital > hospital.sql
EXPOTAR BANCO EM FORMATO SQL

15 - select "nome da coluna" from "nome da tabela";
EXIBIR APENAS UMA COLUNA DA TABELA

16- select "nome da coluna" as "apelido" from "nome da tabela"; 
Podemos dar “apelidos” para tabelas e colunas em nossas consultas. Fazemos isso
utilizando a palavra as ou apenas colocando-os ao lado da tabela ou coluna.

17 - select "coluna" , "coluna" from "nome da tabela";
Podemos modificar a ordem em que as colunas aparecem no resultado especificando o que
queremos no select.

18 - select * from "nome da tabela" where id = '1';
Para filtrar os resultados de uma seleção utilizamos a palavra where

19 - select * from "nome da tabela" where id = '1' or id = '3';
Caso queira filtrar levando em consideração diversos pontos, podemos utilizar as
palavras OR e AND para relacionar filtros

20 - select * from "nome da tabela" where not id = 6;
O operador not é utilizado na negação de uma condição de filtragem.

21 - O operador de diferença em SQL é: <>
Ele deve ser utilizado quando queremos valores diferentes de.

22 -  select * from "nome da tabela" where "coluna" in ("valor", "valor, "valor"...)
O operador in promove a comparação com uma dada lista de valores

23 - select * from "nome da tabela" where first_name like '_enelope' or first_name like '%CK';
O operador like promove a comparação com a capacidade de utilizar caracteres curingas.
Os caracteres especiais são:
● _ : Substitui apenas um caracter
● %: Substitui qualquer quantidade de caracteres

24 - select distinct "coluna" from "nome da tabela";
Para saber quais são as entradas únicas em um banco utilizamos o distinct

25 - select id from "nome da tabela" order by id;
Para ordenar os resultados de uma query utilizamos order by. DESC para descrescente

26 - select max(id) from "nome da tabela";
Para retornar o valor máximo em um tabela utilizamos dentro do select a função max().

26 - select min(id) from "nome da tabela";
Para retornar o valor minimo em um tabela utilizamos dentro do select a função min().

27 - Agregação - Em alguns cenários queremos contar, somar, agrupar os resultados.
Para realizar isso, precisaremos de mais de uma coluna e utilizar o comando group by

SOMA - select custumer_id, sum(amount) from payment group by customer_id;

CONTAGEM - select custumer_id, count(customer_id) from payment group by customer_id;

28 -  Source C:caminho/da/pasta/arquivo.sql
Abrir um banco de dados externo no terminal 

29 - Filtros em agregações - problema
Como o WHERE acontece antes do SELECT não podemos utilizá-lo!
A filtragem utilizando HAVING resolve este problema pois ele será executado somente
após o SELECT.

select
	customer_id;
	sum(amount)
from
	payment
group by customer_id;
having
	sum(amount) > 100

30 - Limitando resultados - Para limitar a quantidade de linhas retornadas numa consulta utilizamos a palavra limit,
como no exemplo abaixo:
select 
	*
from
	film
limit 30;

Nós podemos especificar também um offset, para dizer a partir de qual registro a
contagem do limite começa.

31 - Condições e classificações - sintaxe
	A expressão CASE é dividida nas seguintes etapas:
	1. CASE: Inicia a verificação de condições
	2. WHEN: Recebe a condição a ser verificada
	3. THEN: Retorno exibido caso a condição seja verdadeira
	4. ELSE: Resultado padrão/default
	5. END: Finaliza a expressão de verificação
	
select 
	customer_id,
	case
		when
			count(customer_id) . 30
		then
			'super cliente'
		when
			count(customer_id) > 15
		then
			'cliente fiel'
		when
			count(customer_id) > 0
		then
			'cliente eventual'
	END as tipo_cliente

32 - Um join é a junção de duas ou mais tabelas para uma única consulta.
Joins são utilizados para agregar informações de diferentes tabelas, mas para juntar
tudo precisamos de uma cola. 
As chaves (PKs e FKs) são utilizadas como cola. Elas identificam o relacionamento entre
as tabelas. Assim, quando elas forem iguais podem ser utilizadas.
O inner join preserva apenas os registros que tem equivalência nas duas tabelas
(interseção).
A sintaxe de um inner join consiste em estabelecer uma equivalência entre as chaves
utilizadas. Ex:

select 
	cli.id
	cli.nome
	vend.valor
from
	cliente cli
inner join
	venda vend on vend.id_cliente = cli.id
